{"version":3,"sources":["utils.js","components/connection.jsx","components/history.jsx","components/listen.jsx","components/emitter.jsx","components/ack.jsx","App.jsx","index.js"],"names":["getDefault","key","def","value","localStorage","getItem","JSON","parse","setDefault","setItem","stringify","Connection","connData","createConnection","eventsToListenFor","emitTo","useState","formValid","setFormValid","serverUrl","setServerUrl","config","setConfig","useEffect","server","Alert","variant","show","errors","length","join","Form","onSubmit","e","preventDefault","stopPropagation","console","log","Row","className","Col","Control","required","placeholder","type","onChange","target","as","Text","Button","block","disabled","loading","href","History","data","title","stack","channels","clearHistory","emitBack","items","map","item","ListGroup","Item","sm","date","toLocaleTimeString","Badge","channel","size","onClick","emitButtonClick","toISOString","Listen","listeners","addListener","listenHistory","setChannel","formValidation","setFormValidation","getChannelMessages","filter","listenerBoxes","index","noValidate","validated","trim","v","includes","Emitter","emitToChannels","addEmitTo","emitData","emitHistory","emitChannel","setEmitChannel","emitText","setEmitText","emitDataJson","setEmittDataJson","newEmitter","setNewEmitter","emitFormErrors","setEmitFormErrors","eventOptions","xs","dataToEmit","error","Check","id","label","checked","Ack","ackHistory","App","socket","setSocket","isReady","setIsReady","isReadyRef","useRef","current","connected","setConnData","appConfig","setAppConfig","setEventsToListenFor","listenTo","setListenTo","setEmitTo","setEmitHistory","setListenHistory","setAckHistory","forEach","channelsToAdd","push","on","response","d","Date","toLocaleString","dataType","i","url","socketId","hashObj","listen","emit","window","location","hash","btoa","setHash","atob","split","Container","Tabs","defaultActiveKey","Tab","eventKey","ack","store","toUTCString","Modal","backdrop","centered","Header","Title","Body","io","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.865e36a8.chunk.js","sourcesContent":["\n/**\n * \n * @param {string} key Key to find from local storage \n * @param {*} def Default value to return if not found\n */\nexport function getDefault(key, def) {\n    const value = localStorage.getItem(key);\n    return value ? JSON.parse(value) : def;\n}\n\n/**\n * Set default value in locastorage\n * \n * @param {string} key Key to set\n * @param {*} value value to set\n */\nexport function setDefault(key, value) {\n    localStorage.setItem(key, JSON.stringify(value));\n    return value;\n}\n","import { useState, useEffect } from 'react';\nimport { Form, Col, Button, Alert } from 'react-bootstrap';\nimport { setDefault } from '../utils';\n\nexport default function Connection({ connData, createConnection, eventsToListenFor, emitTo }) {\n  const [formValid, setFormValid] = useState([]);\n  const [serverUrl, setServerUrl] = useState([]);\n  const [config, setConfig] = useState();\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    try {\n      JSON.parse(config);\n    } catch (e) {\n      console.log('cannot parse config json', e);\n      setFormValid(() => [e]);\n      return;\n    }\n\n    setFormValid(() => []);\n    createConnection(setDefault(\"server\", serverUrl), setDefault(\"config\", config));\n  }\n\n  useEffect(() => {\n    setConfig(() => connData.config);\n    setServerUrl(() => connData.server);\n  }, [connData]);\n\n  return (\n    <>\n      <Alert variant=\"danger\" show={(connData.errors).length > 0 || formValid.length > 0}>\n        {connData.errors.join(', ')} {formValid.join(', ')}\n      </Alert>\n\n      <Form onSubmit={onFormSubmit}>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control required value={serverUrl} placeholder=\"server url\" type=\"url\" onChange={(e) => setServerUrl(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"textarea\" placeholder=\"JSON config\" value={config} onChange={(e) => setConfig(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mt-2\">\n          <Col>\n            <Form.Text className=\"mb-2\">\n              <strong>Listen to</strong>: {eventsToListenFor.join(', ')} <strong>Emit to</strong>: {emitTo.join(', ')}\n            </Form.Text>\n            <Button variant=\"success\" type=\"submit\" block disabled={connData.loading}>{connData.loading ? 'Connecting...' : 'Connect'}</Button>\n            <div className=\"mt-3 text-center text-warning\">\n              This uses socket.io version 3 and above. For version 2.x use the previous version of socketio-client-tool <a href=\"v1/\">here</a>.\n            </div>\n          </Col>\n        </Form.Row>\n      </Form>\n    </>\n  )\n}\n","import { Button, ListGroup } from 'react-bootstrap'\nimport { Col, Row, Badge } from 'react-bootstrap';\nimport { BsTrash } from 'react-icons/bs';\n\nexport default function History({ data, title, stack, channels, clearHistory, emitBack }) {\n  const emitButtonClick = (e, item) => {\n    if (typeof emitBack === 'function') {\n      emitBack(item.channel, item.data);\n    }\n  }\n\n  const items = data.map((item) => {\n    return (\n      <ListGroup.Item key={item.date.toISOString() + '--' + item.channel}>\n        <Row>\n          <Col sm={4}>\n            <small>{item.date.toLocaleTimeString()}</small> <br /> <Badge variant=\"info\">{item.channel}</Badge>\n          </Col>\n          <Col>\n            <div className=\"float-right\">\n              <Button className={typeof emitBack !== 'function' ? 'd-none': ''} size=\"sm\" variant=\"warning\" onClick={e => emitButtonClick(e, item)}>emit</Button>\n            </div>\n            <pre>{typeof item.data === \"string\" ? item.data : JSON.stringify(item.data, null, 2)}</pre>\n          </Col>\n        </Row>\n      </ListGroup.Item>\n    );\n  });\n\n  const clearHistoryClick = (e) => {\n    clearHistory(stack, channels);\n  }\n\n  return (\n    <div>\n      <div className=\"mt-4 histories\">\n        <h3>\n          {title}\n          <Button size=\"sm\" onClick={clearHistoryClick} className={items.length > 0 ? \"ml-2 \" : \"d-none\" } variant=\"danger\"><BsTrash className=\"mr-2\" />clear</Button>\n          </h3>\n        <ListGroup variant=\"flush rounded text-white\">\n          {items}\n        </ListGroup>\n      </div>\n    </div>\n  );\n}","import { useState } from \"react\";\nimport History from './history.jsx';\nimport { Form, Button, Col, Alert } from 'react-bootstrap';\n\nexport default function Listen({ listeners, addListener, listenHistory, clearHistory }) {\n\n  const [channel, setChannel] = useState('');\n  const [formValidation, setFormValidation] = useState([]);\n\n  const getChannelMessages = (channel) => {\n    return listenHistory.filter(item => channel === item.channel);\n  }\n\n  const listenerBoxes = listeners.map((item, index) => {\n    return (\n      <History key={index} data={getChannelMessages(item)} title={item} stack=\"listen\" channels={[item]} clearHistory={clearHistory} />\n    );\n  });\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    addListener([channel]);\n    setChannel('');\n  }\n\n  const channelTextBoxChange = e => {\n    setChannel(e.target.value.trim());\n    setFormValidation(v => []);\n    if (listeners.includes(e.target.value)) {\n      setFormValidation(v => [...v, 'Event already exists']);\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <Alert variant=\"danger\" show={(formValidation).length > 0}>\n          {formValidation.join(', ')}\n        </Alert>\n        <Form onSubmit={onFormSubmit} noValidate validated={formValidation.length === 0}>\n          <Form.Row className=\"mb-2\">\n            <Col>\n              <Form.Control placeholder=\"listen to a new event...\" value={channel} onChange={channelTextBoxChange} />\n            </Col>\n            <Col>\n              <Button variant=\"success\" type=\"submit\" block disabled={formValidation.length !== 0 || channel.length < 1}>Add</Button>\n            </Col>\n          </Form.Row>\n        </Form>\n      </div>\n      <h3>Listening to</h3>\n      {listenerBoxes}\n    </div>\n  );\n}","import { useState } from 'react';\nimport { Form, Col, Button, Alert } from 'react-bootstrap';\nimport History from './history.jsx';\n\nexport default function Emitter({ emitToChannels, addEmitTo, emitData, emitHistory, clearHistory, stack }) {\n  const [emitChannel, setEmitChannel] = useState('socketio-client');\n  const [emitText, setEmitText] = useState('');\n  const [emitDataJson, setEmittDataJson] = useState(false);\n  const [newEmitter, setNewEmitter] = useState('');\n  const [emitFormErrors, setEmitFormErrors] = useState([]);\n\n  const onEmitDataSubmit = (e) => {\n    e.preventDefault();\n\n    let dataToEmit = emitText;\n\n    if (emitDataJson === true) {\n      try {\n        dataToEmit = JSON.parse(emitText);\n      } catch (error) {\n        // setEmitFormErrors((items) => [...items, `Failed to parse JSON data: ${error}`]);\n        setEmitFormErrors(() => [`Failed to parse JSON data: ${error}`]);\n        return;\n      }\n    }\n    setEmitText(() => '');\n    setEmitFormErrors(() => []);\n    emitData(emitChannel, dataToEmit);\n  }\n\n  const onAddEmitterSubmit = (e) => {\n    e.preventDefault();\n    addEmitTo(newEmitter);\n    setNewEmitter('');\n    setEmitChannel(() => newEmitter);\n  }\n\n  const eventOptions = emitToChannels.map((item) => {\n    return (\n      <option key={item} value={item}>{item}</option>\n    );\n  });\n\n  return (\n    <div>\n      <Form onSubmit={onAddEmitterSubmit} className=\"mb-3\">\n        <Form.Row>\n          <Col xs={4}>\n            <Form.Control size=\"sm\" value={newEmitter} onChange={(e) => setNewEmitter(e.target.value)} placeholder=\"Event name\" />\n          </Col>\n          <Col xs={2}>\n            <Button size=\"sm\" variant=\"info\" type=\"submit\" block>Add</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <hr />\n\n      <Form onSubmit={onEmitDataSubmit}>\n        <Alert variant=\"danger\" show={emitFormErrors.length > 0}>\n          {emitFormErrors.join(', ')}\n        </Alert>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"select\" value={emitChannel} onChange={(e) => setEmitChannel(e.target.value)}>\n              {eventOptions}\n            </Form.Control>\n          </Col>\n          <Col>\n            <Form.Check type=\"switch\" id=\"is-json\" label=\"JSON data\" value={emitDataJson} onChange={(e) => setEmittDataJson(() => e.target.checked)} placeholder=\"data...\" className=\"pt-3 pl-5\" />\n          </Col>\n        </Form.Row>\n        <Form.Row className=\"mb-2\">\n          <Col>\n            <Form.Control as=\"textarea\" value={emitText} onChange={(e) => setEmitText(e.target.value)} />\n          </Col>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Button variant=\"success\" type=\"submit\" block>Emit</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n\n      <hr />\n      <div className=\"mt-4\">\n        <History data={emitHistory} emitBack={emitData} title=\"Messages\" clearHistory={clearHistory} stack={stack} />\n      </div>\n    </div>\n  );\n}","import History from './history.jsx';\n\nexport default function Ack({ ackHistory, clearHistory }) {\n  return (\n    <History data={ackHistory} title=\"Messages\" stack=\"ack\" clearHistory={clearHistory} />\n  );\n}","import './App.css';\nimport Connection from './components/connection.jsx';\nimport Listen from './components/listen.jsx';\nimport Emitter from './components/emitter.jsx';\nimport Ack from './components/ack.jsx';\nimport { useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { Container, Row, Col, Modal, Tabs, Tab } from 'react-bootstrap';\nimport { MdCloudDone, MdCloudOff } from 'react-icons/md';\nimport { getDefault } from './utils';\n\n\n\nfunction App() {\n\n  const [socket, setSocket] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  const isReadyRef = useRef();\n  isReadyRef.current = isReady;\n\n  const [connData, setConnData] = useState({\n    connected: false,\n    loading: false,\n    server: getDefault(\"server\", \"localhost:8080\"),\n    config: getDefault(\"config\", '{\"path\": \"/socket.io\", \"forceNew\": true, \"reconnectionAttempts\": 3, \"timeout\": 2000}'),\n    errors: []\n  });\n\n  const [appConfig, setAppConfig] = useState(0);\n  const [eventsToListenFor, setEventsToListenFor] = useState(['socketio-client', 'message']);\n\n  const [listenTo, setListenTo] = useState([]);\n  const [emitTo, setEmitTo] = useState(['socketio-client', 'socketio-client-ack']);\n\n  // Storage\n  const [emitHistory, setEmitHistory] = useState([]);\n  const [listenHistory, setListenHistory] = useState([]);\n  const [ackHistory, setAckHistory] = useState([]);\n\n  const createConnection = (url, config) => {\n    setConnData(() => {\n      return {\n        connected: false,\n        loading: true,\n        socketId: 'connecting..',\n        server: url,\n        config: config,\n        errors: []\n      }\n    });\n    setSocket(() => io(url, JSON.parse(config)));\n  }\n\n  useEffect(() => {\n    if (socket === null) {\n      return;\n    }\n    socket.on(\"connect\", () => {\n      if (isReadyRef.current === true) {\n        return;\n      }\n\n      setConnData(() => {\n        return {\n          connected: true,\n          loading: false,\n          server: connData.url,\n          socketId: socket.id,\n          config: connData.config,\n          errors: []\n        }\n      });\n      addListener(eventsToListenFor);\n      setIsReady(() => true);\n    });\n\n  });\n\n  useEffect(() => {\n\n  }, [listenTo]);\n\n  function addListener(channels) {\n    channels.forEach(channel => {\n      const channelsToAdd = [];\n      if (!listenTo.includes(channel)) {\n        channelsToAdd.push(channel);\n        socket.on(channel, (response) => {\n          console.log(\"data received\", channel, response);\n          const d = new Date();\n          const data = {\n            key: d.toLocaleString(),\n            date: d,\n            channel: channel,\n            data: typeof response === 'string' ? response : JSON.stringify(response, null, 2),\n            dataType: typeof response === 'string' ? 'string' : 'json'\n          };\n          setListenHistory(i => [data, ...i]);\n        });\n      }\n      setListenTo(items => [...channelsToAdd, ...items]);\n    });\n  }\n\n  const addEmitTo = (channel) => {\n    setEmitTo((items) => [channel, ...items]);\n  }\n\n  const emitData = (emitChannel, dataToEmit) => {\n    socket.emit(emitChannel, dataToEmit, (ack) => {\n      const date = new Date();\n      const store = {\n        key: date.toUTCString(),\n        channel: emitChannel,\n        date: date,\n        data: ack,\n        type: typeof ack === 'string' ? 'string' : 'json'\n      }\n      setAckHistory(items => [store, ...items]);\n    });\n    const date = new Date();\n    const store = {\n      key: date.toUTCString(),\n      channel: emitChannel,\n      date: date,\n      data: dataToEmit,\n      type: typeof dataToEmit === 'string' ? 'string' : 'json'\n    }\n    setEmitHistory(items => [store, ...items]);\n  }\n\n  // const histryStackChannelsFilter = (item, channels) => {\n  //   return !channels.includes(item.channel);\n  // }\n\n  function clearHistory(stack, channels) {\n    switch (stack) {\n      case 'emit':\n        setEmitHistory(() => []);\n        break;\n      case 'listen':\n        setListenHistory(items => items.filter(i => !channels.includes(i.channel)));\n        break;\n      case 'ack':\n        setAckHistory(() => []);\n        break;\n      default:\n        break;\n    }\n  }\n\n  useEffect(() => {\n\n    function setHash() {\n      const hashObj = {\n        server: connData.server,\n        listen: listenTo,\n        emit: emitTo,\n        config: connData.config\n      };\n      window.location.hash = window.btoa(JSON.stringify(hashObj));\n    }\n\n    function getHash() {\n      return window.location.hash === \"\" ? false : JSON.parse(window.atob(window.location.hash.split(\"#\")[1]));\n    }\n\n    if (connData.connected) {\n      setHash();\n    } else {\n      const d = getHash();\n\n      if (d !== false && appConfig === 0) { // Has hash value on load\n        setAppConfig(() => 1);\n        if (d.listen.length > 0) {\n          setEventsToListenFor(() => d.listen);\n        }\n        setEmitTo(() => d.emit);\n        setConnData(() => {\n          return {\n            connected: false,\n            loading: false,\n            server: d.server,\n            config: d.config,\n            errors: []\n          };\n        });\n      }\n    }\n  }, [connData.connected, connData.server, connData.config, listenTo, emitTo, appConfig]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col className=\"text-right\">\n            <span className=\"small\">\n              ID: <b>{connData.socketId}</b> Server: <b>{connData.server}</b>\n            </span>\n            {connData.connected ? <MdCloudDone className=\"text-success ml-3 h3\" /> : <MdCloudOff className=\"text-danger mx-2 h3\" />}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Tabs defaultActiveKey=\"listen\" className=\"mb-4 nav-fillx\">\n              <Tab eventKey=\"listen\" title=\"Listen\">\n                <Listen listeners={listenTo} addListener={addListener} listenHistory={listenHistory} clearHistory={clearHistory} stack=\"listen\" />\n\n              </Tab>\n\n              <Tab eventKey=\"emit\" title=\"Emit\">\n                <Emitter emitToChannels={emitTo} addEmitTo={addEmitTo} emitData={emitData} emitHistory={emitHistory} clearHistory={clearHistory} stack=\"emit\" />\n              </Tab>\n\n              <Tab eventKey=\"ack\" title=\"Ack\">\n                <Ack ackHistory={ackHistory} stack=\"ack\" clearHistory={clearHistory} />\n              </Tab>\n\n            </Tabs>\n          </Col>\n        </Row>\n      </Container>\n\n\n      <Modal show={!(connData.connected)} backdrop=\"static\" centered size=\"lg\">\n\n        <Modal.Header>\n          <Modal.Title>\n            Configure connection\n            </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Connection eventsToListenFor={eventsToListenFor} emitTo={emitTo} connData={connData} createConnection={createConnection} />\n        </Modal.Body>\n      </Modal>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}